#!/bin/bash

function join_by { local d=$1; shift; local f=$1; shift; printf %s "$f" "${@/#/$d}"; }

mount -o remount,size=4G /run/archiso/cowspace
pacman -Syu --noconfirm
pacman -S --noconfirm dialog glibc

#######################
# Confirmation dialog #
#######################

dialog --stdout --title "Confirm" --yesno "Have you set up the partition table?" 10 30

retval=$?

clear

case $retval in
  0)
    ;;
  1)
    dialog --stdout --title "Info" --msgbox "I expect the following partitions\n\nEfi:  FAT32\nRoot: BTRFS\nSwap: SWAP" 10 40;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac

###################
# Hostname dialog #
###################

hostname=$(dialog --stdout --title "Hostname" --inputbox "Enter hostname" 0 0)

retval=$?

clear

case $retval in
  0)
    if [ -z "$hostname" ]; then
        dialog --stdout --title "Error" --msgbox "Hostname cannot be empty" 10 30;
        clear;
        exit 1;
    fi
    echo "Input string is ${hostname}";;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac

###################
# Username dialog #
###################

username=$(dialog --stdout --title "Username" --inputbox "Enter username" 0 0)

retval=$?

clear

case $retval in
  0)
    if [ -z "$username" ]; then
        dialog --stdout --title "Error" --msgbox "Username cannot be empty" 10 30;
        clear;
        exit 1;
    fi
    echo "Input string is ${username}";;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac

###################
# Password dialog #
###################

password=$(dialog --stdout --title "Password" --passwordbox "Enter password" 0 0)

retval=$?

clear

case $retval in
  0)
    if [ -z "$password" ]; then
        dialog --stdout --title "Error" --msgbox "Password cannot be empty" 10 30;
        clear;
        exit 1;
    fi;;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac


password_repeat=$(dialog --stdout --title "Password" --passwordbox "Repeat password" 0 0)

retval=$?

clear

case $retval in
  0)
    if [ -z "$password_repeat" ]; then
        dialog --stdout --title "Error" --msgbox "Password cannot be empty" 10 30;
        clear;
        exit 1;
    elif [ "$password" != "$password_repeat" ]; then
        dialog --stdout --title "Error" --msgbox "Passwords did not match" 10 30;
        clear;
        exit 1;
    fi
    echo "Input string is ${password_repeat}";;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac

#######################
# Confirmation dialog #
#######################

dialog --stdout --title "Confirm" --yesno "Hostname: ${hostname}\nUsername: ${username}" 10 30

retval=$?

clear

case $retval in
  0)
    ;;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac

####################
# Partition dialog #
####################

partitionlist=$(lsblk -plnx size -I 8 -o name,size,type | grep -Ev "boot|rpmb|loop|disk" | tac | awk '{print $1 " " $2}')

efi_partition=$(dialog --stdout --title "Partitions" --menu "Select efi partition" 0 0 0 ${partitionlist})

retval=$?

clear

case $retval in
  0)
    if [ "$(lsblk -n -o fstype "${efi_partition}")" != "vfat" ]; then
        dialog --stdout --title "Error" --msgbox "The selected partition isn't a FAT filesystem" 10 30;
        clear;
        exit 1;
    fi
    ;;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac


root_partition=$(dialog --stdout --title "Partitions" --menu "Select root partition" 0 0 0 ${partitionlist})

retval=$?

clear

case $retval in
  0)
    if [ "$(lsblk -n -o fstype "${root_partition}")" != "btrfs" ]; then
        dialog --stdout --title "Error" --msgbox "The selected partition isn't a BTRFS filesystem" 10 30;
        clear;
        exit 1;
    fi
    ;;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac


swap_partition=$(dialog --stdout --title "Partitions" --menu "Select swap partition" 0 0 0 ${partitionlist})

retval=$?

clear

case $retval in
  0)
    if [ "$(lsblk -n -o fstype "${swap_partition}")" != "swap" ]; then
        dialog --stdout --title "Error" --msgbox "The selected partition isn't a SWAP filesystem" 10 30;
        clear;
        exit 1;
    fi
    ;;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac

#######################
# Confirmation dialog #
#######################

dialog --stdout --title "Confirm" --yesno "Efi:  ${efi_partition}\nRoot: ${root_partition}\nSwap: ${swap_partition}" 10 30

retval=$?

clear

case $retval in
  0)
    ;;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac

#################
# Locale dialog #
#################

localelist=$(grep UTF-8 /etc/locale.gen | sed 's/\..[^ tab]\+//' | sed '/@/d' | sed 's/#//g' | sed 's/^\s*\(.*[^ \t]\)\(\s\+\)*$/\1/' | awk '{if (NR == 1) {print $1 " " $2 " ON"} else {print $1 " " $2 " OFF"}}')

locales=($(dialog --stdout --title "Locale" --checklist "Select locales" 20 61 5 ${localelist}))

retval=$?

clear

case $retval in
  0)
  should_set_locale=true
    ;;
  1)
  should_set_locale=false
    dialog --stdout --title "Info" --msgbox "No locale has been generated!" 10 30;;
  255)
  should_set_locale=false
    dialog --stdout --title "Info" --msgbox "No locale has been generated!" 10 30;;
esac

#################
# Locale dialog #
#################

INDEX=1
for _locale in "${locales[@]}"
do
    locale_options="$locale_options $INDEX $_locale"
    echo "$locale_options"
    ((INDEX=INDEX+1))
done

main_locale=$(dialog --stdout --title "Locale" --menu "Select main locale" 20 61 5 ${locale_options})

retval=$?

case $retval in
  0)
  should_set_main_locale=true
  main_locale=${locales[$main_locale-1]}
    ;;
  1)
  should_set_main_locale=false
    dialog --stdout --title "Info" --msgbox "Main locale has not been set!" 10 30;;
  255)
  should_set_main_locale=false
    dialog --stdout --title "Info" --msgbox "Main locale has not been set!" 10 30;;
esac

#################
# Keymap dialog #
#################

keymaplist=$(find /usr/share/kbd/keymaps -type f -printf "%f %h\n" | sort -V | sed 's/.map.gz//g' | sed 's/\/.*.\///')

keymap=$(dialog --stdout --title "Keymap" --menu "Select keymap" 20 61 5 ${keymaplist})

retval=$?

clear

case $retval in
  0)
  should_load_keys=true
    ;;
  1)
  should_load_keys=false
    dialog --stdout --title "Info" --msgbox "No keymap has been selected!" 10 30;;
  255)
  should_load_keys=false
    dialog --stdout --title "Info" --msgbox "No keymap has been selected!" 10 30;;
esac

#############################
# Setup systemd-boot dialog #
#############################

dialog --stdout --title "Boot" --yesno "Setup systemd-boot?" 10 30

retval=$?

clear

case $retval in
  0)
  should_setup_systemd_boot=true
    ;;
  1)
  should_setup_systemd_boot=false
    dialog --stdout --title "Info" --msgbox "Systemd-boot will not be set up" 10 30;;
  255)
  should_setup_systemd_boot=false
    dialog --stdout --title "Info" --msgbox "Systemd-boot will not be set up" 10 30;
esac

##############################
# Desktop Environment dialog #
##############################

desktop_environment=$(dialog --stdout --title "Desktop Environment" --menu "Select DE" 20 61 5 0 None 1 "KDE Plasma" 2 Xfce)

retval=$?

clear

case $retval in
  0)
  should_install_de=true
    ;;
  1)
  should_install_de=false
    dialog --stdout --title "Info" --msgbox "DE will not be set up" 10 30;;
  255)
  should_install_de=false
    dialog --stdout --title "Info" --msgbox "DE will not be set up" 10 30;
esac

######################################
# Desktop Environment Greeter dialog #
######################################

#if [[ $desktop_environment == 2 ]]; then
#  lightdm_greeter=$(dialog --stdout --title "Desktop Environment" --menu "Select DE" 20 61 5 0 "LightDM GTK Greeter" 1 "Pantheon Greeter" 2 "Mini Greeter" 3 "LightDM KDE Greeter" 4 "Nody Greeter")
#
#  retval=$?
#
#  clear
#
#  case $retval in
#    0)
#      ;;
#    1)
#    lightdm_greeter=-1
#      dialog --stdout --title "Info" --msgbox "Greeter will not be set up" 10 30;;
#    255)
#    lightdm_greeter=-1
#      dialog --stdout --title "Info" --msgbox "Greeter will not be set up" 10 30;;
#  esac
#fi

######################################
# Desktop Environment Wayland dialog #
######################################

wayland_string=""

if [[ "$should_install_de" == true ]]; then

dialog --stdout --title "Desktop Environment" --yesno "Install wayland session?" 10 30

retval=$?

clear

case $retval in
  0)
  wayland_string="plasma-wayland-session egl-wayland"
    ;;
  1)
  wayland_string=""
    dialog --stdout --title "Info" --msgbox "Wayland session will not be set up" 10 30;;
  255)
  wayland_string=""
    dialog --stdout --title "Info" --msgbox "Wayland session will not be set up" 10 30;
esac

fi

#####################
# GPU driver dialog #
#####################

dialog --stdout --title "Graphics Driver" --yesno "Install Nvidia driver?" 10 30

retval=$?

clear

case $retval in
  0)
  nvidia_bool=true
  nvidia_str="nvidia"
    ;;
  1)
  nvidia_bool=false
  nvidia_str=""
    dialog --stdout --title "Info" --msgbox "The Nvidia driver will not be installed" 10 30;;
  255)
  nvidia_bool=false
  nvidia_str=""
    dialog --stdout --title "Info" --msgbox "The Nvidia driver will not be installed" 10 30;
esac

#############################
# Final confirmation dialog #
#############################

dialog --stdout --title "Final Confirm" --yesno "Hostname:     ${hostname}\nUsername:     ${username}\nLocales:      $(join_by ", " "${locales[@]}")\nMain locale:  ${main_locale}\nKeymap:       ${keymap}\nEfi:          ${efi_partition}\nRoot:         ${root_partition}\nSwap:         ${swap_partition}\nSystemd-boot: ${should_setup_systemd_boot}\nKDE:          ${should_install_kde}\nNvidia:       ${nvidia_bool}" 20 40

retval=$?

clear

case $retval in
  0)
    ;;
  1)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
  255)
    dialog --stdout --title "Info" --msgbox "Installation has been cancelled" 10 30;
    clear;
    exit 1;;
esac

#############################
# Stop here if just testing #
#############################

if [ "$EUID" -ne 0 ]; then
    echo "Stopping here to avoid issues since you aren't root!"
    exit 1
fi

####################
# Atumatic section #
####################

mkswap "$swap_partition"

mount "$root_partition" /mnt

btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home

umount /mnt

mount -o noatime,compress=lzo,space_cache,subvol=@ "$root_partition" /mnt
mkdir /mnt/{boot,home}
mount -o noatime,compress=lzo,space_cache,subvol=@home "$root_partition" /mnt/home

mount "$efi_partition" /mnt/boot

pacstrap /mnt base base-devel linux linux-firmware micro sudo intel-ucode networkmanager xclip "${nvidia_str}"

genfstab -U /mnt >> /mnt/etc/fstab

arch-chroot /mnt /bin/bash -c "ln -sf /usr/share/zoneinfo/Europe/Copenhagen /etc/localtime"
arch-chroot /mnt /bin/bash -c "hwclock --systohc"

arch-chroot /mnt /bin/bash -c "useradd -m -G wheel ${username}"
arch-chroot /mnt /bin/bash -c 'echo "'"${username}:${password}"'" | chpasswd'
arch-chroot /mnt /bin/bash -c 'echo "'"root:${password}"'" | chpasswd'
arch-chroot /mnt /bin/bash -c "systemctl enable NetworkManager"
sed -i "/%wheel ALL=(ALL) ALL/s/^#//" /mnt/etc/sudoers

echo "${hostname}" > /mnt/etc/hostname

echo "127.0.0.1    localhost" >> /mnt/etc/hosts
echo "::1          localhost" >> /mnt/etc/hosts
echo "127.0.1.1    ${hostname}.localdomain ${hostname}" >> /mnt/etc/hosts

if [[ "$should_load_keys" == true ]]; then
  echo 'KEYMAP="'"${keymap}"'"' > /mnt/etc/vconsole.conf
    loadkeys "$keymap"
fi

if [[ "$should_set_locale" == true ]]; then

    for locale in "${locales[@]}"
    do
        arch-chroot /mnt /bin/bash -c "sed -i 's/#\('${locale}.UTF-8'\)/\1/' /etc/locale.gen"
    done
    
    arch-chroot /mnt /bin/bash -c "locale-gen"
fi

if [[ "$should_set_main_locale" == true ]]; then
  echo 'LANG="'"${main_locale}.UTF-8"'"' > /mnt/etc/locale.conf
fi

if [[ "$should_setup_systemd_boot" == true ]]; then
  arch-chroot /mnt /bin/bash -c "bootctl install"
    printf "%s\n" "title Arch Linux" "linux /vmlinuz-linux" "initrd /initramfs-linux.img" "options root=${root_partition} rw rootfstype=btrfs rootflags=subvol=@" > /mnt/boot/loader/entries/arch.conf
fi

if [[ "$should_install_de" == true ]]; then
  case $desktop_environment in
    0)
      ;;
    1)
      arch-chroot /mnt /bin/bash -c "pacman -S --noconfirm sddm sddm-kcm plasma ${wayland_string} dolphin konsole kate packagekit-qt5 firefox"
      arch-chroot /mnt /bin/bash -c "systemctl enable sddm"
    
      mkdir /mnt/home/"${username}"/Documents
      mkdir /mnt/home/"${username}"/Downloads
      mkdir /mnt/home/"${username}"/Videos
      mkdir /mnt/home/"${username}"/Pictures
      mkdir /mnt/home/"${username}"/Music
    
      arch-chroot /mnt /bin/bash -c "chown -R ${username}:${username} /home/${username}";;
    2)
      arch-chroot /mnt /bin/bash -c "pacman -S --noconfirm xfce4 lightdm lightdm-gtk-greeter firefox";;
      # 0 "LightDM GTK Greeter" 1 "Pantheon Greeter" 2 "Mini Greeter" 3 "LightDM KDE Greeter" 4 "Nody Greeter"
      #case $lightdm_greeter in
      #  0)
      #    arch-chroot /mnt /bin/bash -c "pacman -S --noconfirm lightdm-gtk-greeter";;
      #  1)
      #    arch-chroot /mnt /bin/bash -c "pacman -S --noconfirm lightdm-pantheon-greeter";;
      #  2)
      #    arch-chroot /mnt /bin/bash -c "pacman -S --noconfirm lightdm-mini-greeter";;
      #  3)
      #    arch-chroot /mnt /bin/bash -c "pacman -S --noconfirm lightdm-kde-greeter";;
      #  4)
      #    arch-chroot /mnt /bin/bash -c "pacman -S --noconfirm nody-greeter";;
      #esac
  esac
  
fi





dialog --stdout --title "The End" --msgbox "Your system has now been set up and is ready for use!\nThe root password is the same as your user, so consider changing it for extra security." 10 40
clear
